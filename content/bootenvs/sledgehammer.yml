---
# Sledgehammer (the per machine bootenv)
# This bootenv requires the start-up.sh file to be rendered by the discovery bootenv.
# These two bootenvs are linked and should be used as a pair.
Name: "sledgehammer"
Description: "Ram-Only image loaded with tools to allow for discovery and maintenance"
OS:
  Family: "redhat"
  Name: "sledgehammer/9c1ad5cb7483928e6aba1d93ba363de929169f37"
  IsoFile: "sledgehammer-9c1ad5cb7483928e6aba1d93ba363de929169f37.tar"
  IsoUrl: "http://rackn-sledgehammer.s3-website-us-west-2.amazonaws.com/sledgehammer/9c1ad5cb7483928e6aba1d93ba363de929169f37/sledgehammer-9c1ad5cb7483928e6aba1d93ba363de929169f37.tar"
  Kernel: '{{if .ParamExists "custom-kernel"}}{{.Param "custom-kernel"}}{{else}}vmlinuz0{{end}}'
Initrds:
  - '{{if .ParamExists "custom-initrd"}}{{.Param "custom-initrd"}}{{else}}stage1.img{{end}}'
BootParams: >-
  rootflags=loop
  root=live:/sledgehammer.iso
  rootfstype=auto
  ro
  liveimg
  rd_NO_LUKS
  rd_NO_MD
  rd_NO_DM
  provisioner.web={{.ProvisionerURL}}
  rs.uuid={{.Machine.UUID}}
  --
  {{.Param "kernel-console"}}
  {{.Param "kernel-options"}}
RequiredParams:
OptionalParams:
  - "custom-initrd"
  - "custom-kernel"
  - "kernel-console"
  - "kernel-options"
Templates:
  - Name: "pxelinux"
    Path: "pxelinux.cfg/{{.Machine.HexAddress}}"
    Contents: |
      DEFAULT discovery
      PROMPT 0
      TIMEOUT 10
      LABEL discovery
        KERNEL {{.Env.PathFor "tftp" .Env.Kernel}}
        INITRD {{.Env.JoinInitrds "tftp"}}
        APPEND {{.BootParams}}
        IPAPPEND 2
  - Name: "pxelinux-mac"
    Path: 'pxelinux.cfg/{{.Machine.MacAddr "pxelinux"}}'
    Contents: |
      DEFAULT discovery
      PROMPT 0
      TIMEOUT 10
      LABEL discovery
        KERNEL {{.Env.PathFor "tftp" .Env.Kernel}}
        INITRD {{.Env.JoinInitrds "tftp"}}
        APPEND {{.BootParams}}
        IPAPPEND 2
  - Name: "ipxe"
    Path: "{{.Machine.Address}}.ipxe"
    Contents: |
      #!ipxe
      kernel {{.Env.PathFor "http" .Env.Kernel}} {{.BootParams}} BOOTIF=01-${netX/mac:hexhyp}
      {{range $initrd := .Env.Initrds}}
      initrd {{$.Env.PathFor "http" $initrd}}
      {{end}}
      boot
  - Name: "ipxe-mac"
    Path: '{{.Machine.MacAddr "ipxe"}}.ipxe'
    Contents: |
      #!ipxe
      kernel {{.Env.PathFor "http" .Env.Kernel}} {{.BootParams}} BOOTIF=01-${netX/mac:hexhyp}
      {{range $initrd := .Env.Initrds}}
      initrd {{$.Env.PathFor "http" $initrd}}
      {{end}}
      boot
  - Name: "control.sh"
    Path: "{{.Machine.Path}}/control.sh"
    Contents: |
      #!/bin/bash
      # Copyright 2017, RackN
      #
      # Licensed under the Apache License, Version 2.0 (the "License");
      # you may not use this file except in compliance with the License.
      # You may obtain a copy of the License at
      #
      #  http://www.apache.org/licenses/LICENSE-2.0
      #
      # Unless required by applicable law or agreed to in writing, software
      # distributed under the License is distributed on an "AS IS" BASIS,
      # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      # See the License for the specific language governing permissions and
      # limitations under the License.
      #

      # We get the following variables from start-up.sh
      # MAC BOOTDEV ADMIN_IP DOMAIN HOSTNAME HOSTNAME_MAC MYIP

      set -x
      shopt -s extglob
      export PS4="${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): "
      cp /usr/share/zoneinfo/GMT /etc/localtime

      # This will contain a token appropriate for the path being
      # used below.  Reset the token to the longer machine token.
      export RS_TOKEN="{{.GenerateInfiniteToken}}"

      # If we do not have hardware addresses set on the machine, set them now.
      get_macs() {
          local maclist=""
          local nic=""
          for nic in /sys/class/net/*; do
              [[ -f $nic/type && -f $nic/address && $(cat "$nic/type") == 1 ]] || continue
              maclist="$maclist,\"$(cat "$nic/address")\""
          done
          printf '[%s]' "${maclist#,}"
      }

      json="$(drpcli machines show "$RS_UUID")"
      # The machine does not have hardware addresses set, so set them
      if [[ "$(jq '.HardwareAddrs | length' <<< "$json")" = 0 ]]; then
          drpcli machines update "$RS_UUID" "{\"HardwareAddrs\": $(get_macs)}"
      fi
      unset get_macs json

      {{template "reset-workflow.tmpl" .}}
      {{template "runner.tmpl" .}}

      # The last line in this script must always be exit 0!!
      exit 0
Meta:
  feature-flags: "change-stage-v2"
  icon: "microchip"
  color: "green"
  title: "Digital Rebar Community Content"
